package org.springblade.modules.admin.util;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.7.
 */
@SuppressWarnings("rawtypes")
public class Market extends Contract {
    public static final String BINARY = "608060405273478e3634addccb19ae7e48af92ddd575d46fe747600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006557600080fd5b50600160008190555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613ac1806100be6000396000f3fe6080604052600436106100a75760003560e01c80636bcb6906116100645780636bcb6906146101ba5780638033e548146101d657806388700d1c146101ff578063911fc1cb1461023c578063b2ddee0614610267578063df37e70414610290576100a7565b806312065fe0146100ac578063150b7a02146100d75780631bd43be3146101145780633535db221461013d5780633ccfd60b14610166578063616593751461017d575b600080fd5b3480156100b857600080fd5b506100c16102b9565b6040516100ce9190612a6a565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190612b88565b6102c1565b60405161010b9190612c4b565b60405180910390f35b34801561012057600080fd5b5061013b60048036038101906101369190612c66565b6102d6565b005b34801561014957600080fd5b50610164600480360381019061015f9190612c93565b61037a565b005b34801561017257600080fd5b5061017b610982565b005b34801561018957600080fd5b506101a4600480360381019061019f9190612cfa565b610a25565b6040516101b19190613017565b60405180910390f35b6101d460048036038101906101cf9190613039565b610b5a565b005b3480156101e257600080fd5b506101fd60048036038101906101f8919061308c565b61145c565b005b34801561020b57600080fd5b506102266004803603810190610221919061308c565b611eba565b6040516102339190613017565b60405180910390f35b34801561024857600080fd5b506102516120df565b60405161025e91906130db565b60405180910390f35b34801561027357600080fd5b5061028e6004803603810190610289919061308c565b612109565b005b34801561029c57600080fd5b506102b760048036038101906102b29190612c66565b612686565b005b600047905090565b600063150b7a0260e01b905095945050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610376573d6000803e3d6000fd5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d457600080fd5b83836000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561052257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104d8575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561057a57602002820191906000526020600020905b815481526020019060010190808311610566575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156105f757602002820191906000526020600020906000905b82829054906101000a900460ff161515815260200190600101906020826000010492830192600103820291508084116105c15790505b505050505081525050905060008160000151111561064e5782826040517f4a5568d50000000000000000000000000000000000000000000000000000000081526004016106459291906130f6565b60405180910390fd5b600087905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b815260040161068e9190612a6a565b602060405180830381865afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf9190613134565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610745578689896040517f6282431f00000000000000000000000000000000000000000000000000000000815260040161073c93929190613161565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166342842e0e82308b6040518463ffffffff1660e01b815260040161078293929190613161565b600060405180830381600087803b15801561079c57600080fd5b505af11580156107b0573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16636165937587836040518363ffffffff1660e01b81526004016107ef929190613198565b600060405180830381865afa15801561080c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061083591906135d5565b600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030190805190602001906108fc929190612801565b50608082015181600401908051906020019061091992919061288b565b5060a08201518160050190805190602001906109369291906128d8565b509050507fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de4818a8a8960405161096f949392919061361e565b60405180910390a1505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109dc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610a22573d6000803e3d6000fd5b50565b610a2d61297e565b60006040518060c001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600467ffffffffffffffff811115610a7e57610a7d6131d7565b5b604051908082528060200260200182016040528015610aac5781602001602082028036833780820191505090505b508152602001600467ffffffffffffffff811115610acd57610acc6131d7565b5b604051908082528060200260200182016040528015610afb5781602001602082028036833780820191505090505b508152602001600467ffffffffffffffff811115610b1c57610b1b6131d7565b5b604051908082528060200260200182016040528015610b4a5781602001602082028036833780820191505090505b5081525090508091505092915050565b82826000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015610ca857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c5e575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610d0057602002820191906000526020600020905b815481526020019060010190808311610cec575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610d7d57602002820191906000526020600020906000905b82829054906101000a900460ff16151581526020019060010190602082600001049283019260010382029150808411610d475790505b50505050508152505090506000816000015111610dd35782826040517f6831488c000000000000000000000000000000000000000000000000000000008152600401610dca9291906130f6565b60405180910390fd5b8585856000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015610f2257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ed8575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610f7a57602002820191906000526020600020905b815481526020019060010190808311610f66575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610ff757602002820191906000526020600020906000905b82829054906101000a900460ff16151581526020019060010190602082600001049283019260010382029150808411610fc15790505b5050505050815250509050600081600001511161104d5783836040517f6831488c0000000000000000000000000000000000000000000000000000000081526004016110449291906130f6565b60405180910390fd5b60048160400151106110985783836040517f16fd25b300000000000000000000000000000000000000000000000000000000815260040161108f9291906130f6565b60405180910390fd5b600482106110e357838333846040517f9ae2281a0000000000000000000000000000000000000000000000000000000081526004016110da9493929190613663565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff160361115d57838333846040517f9ae2281a0000000000000000000000000000000000000000000000000000000081526004016111549493929190613663565b60405180910390fd5b8060a001518281518110611174576111736136a8565b5b6020026020010151156111c457838333846040517f9ae2281a0000000000000000000000000000000000000000000000000000000081526004016111bb9493929190613663565b60405180910390fd5b60005b81606001515181101561127b573373ffffffffffffffffffffffffffffffffffffffff1682606001518281518110611202576112016136a8565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff160361126857848433856040517f9ae2281a00000000000000000000000000000000000000000000000000000000815260040161125f9493929190613663565b60405180910390fd5b808061127390613706565b9150506111c7565b5080600001513410156112cd57838382600001516040517f7c9345650000000000000000000000000000000000000000000000000000000081526004016112c49392919061374e565b60405180910390fd5b6112d5612724565b6000600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b8152602001908152602001600020905033816003018a815481106113405761133f6136a8565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034816004018a8154811061139f5761139e6136a8565b5b906000526020600020018190555060018160020160008282546113c29190613785565b925050819055506001816005018a815481106113e1576113e06136a8565b5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055507fa454739fb9d0bd43f6763a1c26349732d466aae8ba0c17705f16ec35ec0ebc158b8b338c60405161143f9493929190613663565b60405180910390a150611450612773565b50505050505050505050565b611464612724565b81816000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156115b257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611568575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561160a57602002820191906000526020600020905b8154815260200190600101908083116115f6575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561168757602002820191906000526020600020906000905b82829054906101000a900460ff161515815260200190600101906020826000010492830192600103820291508084116116515790505b505050505081525050905060008160000151116116dd5782826040517f6831488c0000000000000000000000000000000000000000000000000000000081526004016116d49291906130f6565b60405180910390fd5b6004816040015110156117295782826040517f05a319460000000000000000000000000000000000000000000000000000000081526004016117209291906130f6565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461178357600080fd5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156118cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611885575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561192757602002820191906000526020600020905b815481526020019060010190808311611913575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156119a457602002820191906000526020600020906000905b82829054906101000a900460ff1615158152602001906001019060208260000104928301926001038202915080841161196e5790505b5050505050815250509050600060046001436119c091906137b9565b4088886040516020016119d593929190613881565b6040516020818303038152906040528051906020012060001c6119f891906138ed565b9050600082606001518260ff1681518110611a1657611a156136a8565b5b60200260200101519050600083608001518360ff1681518110611a3c57611a3b6136a8565b5b60200260200101519050600089905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e8b6040518263ffffffff1660e01b8152600401611a869190612a6a565b602060405180830381865afa158015611aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac79190613134565b90508073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611b3d57308b8b6040517f6282431f000000000000000000000000000000000000000000000000000000008152600401611b3493929190613161565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166342842e0e30868d6040518463ffffffff1660e01b8152600401611b7a93929190613161565b600060405180830381600087803b158015611b9457600080fd5b505af1158015611ba8573d6000803e3d6000fd5b5050505060006064605085611bbd919061391e565b611bc79190613960565b9050600060058286611bd991906137b9565b611be39190613960565b9050876020015173ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611c2f573d6000803e3d6000fd5b506000611c3c8e8e61277d565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611c84573d6000803e3d6000fd5b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611ced573d6000803e3d6000fd5b5060005b6004811015611da6578860ff168114611d935789606001518181518110611d1b57611d1a6136a8565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc8b608001518381518110611d5357611d526136a8565b5b602002602001015185611d669190613785565b9081150290604051600060405180830381858888f19350505050158015611d91573d6000803e3d6000fd5b505b8080611d9e90613706565b915050611cf1565b50600360008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000611e3f91906129ca565b600482016000611e4f91906129eb565b600582016000611e5f9190612a0c565b50507f076c522f636dc724afa0cf750219696652c8d52545799ed6997ad8c58845165b8e8e898b8787604051611e9a969594939291906139ad565b60405180910390a1505050505050505050505050611eb6612773565b5050565b611ec261297e565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002090506040518060c00160405280826000015481526020018260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260020154815260200182600301805480602002602001604051908101604052809291908181526020018280548015611ff957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611faf575b505050505081526020018260040180548060200260200160405190810160405280929190818152602001828054801561205157602002820191906000526020600020905b81548152602001906001019080831161203d575b50505050508152602001826005018054806020026020016040519081016040528092919081815260200182805480156120ce57602002820191906000526020600020906000905b82829054906101000a900460ff161515815260200190600101906020826000010492830192600103820291508084116120985790505b505050505081525091505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461216357600080fd5b81816000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156122b157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612267575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561230957602002820191906000526020600020905b8154815260200190600101908083116122f5575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561238657602002820191906000526020600020906000905b82829054906101000a900460ff161515815260200190600101906020826000010492830192600103820291508084116123505790505b505050505081525050905060008160000151116123dc5782826040517f6831488c0000000000000000000000000000000000000000000000000000000081526004016123d39291906130f6565b60405180910390fd5b6000816040015111156124285782826040517f9b7ce2e700000000000000000000000000000000000000000000000000000000815260040161241f9291906130f6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461249e5782826040517f9b7ce2e70000000000000000000000000000000000000000000000000000000081526004016124959291906130f6565b60405180910390fd5b60008590506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002090508173ffffffffffffffffffffffffffffffffffffffff166342842e0e308360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b815260040161255893929190613161565b600060405180830381600087803b15801561257257600080fd5b505af1158015612586573d6000803e3d6000fd5b50505050600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600061262291906129ca565b60048201600061263291906129eb565b6005820160006126429190612a0c565b50507ff86e54241e209ee4b38db8e64af9614b083d18f23c32f3293c8a87c6b8bf894387876040516126759291906130f6565b60405180910390a150505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146126e057600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260005403612769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276090613a6b565b60405180910390fd5b6002600081905550565b6001600081905550565b60008273ffffffffffffffffffffffffffffffffffffffff1663589a1743836040518263ffffffff1660e01b81526004016127b89190612a6a565b602060405180830381865afa1580156127d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f99190613134565b905092915050565b82805482825590600052602060002090810192821561287a579160200282015b828111156128795782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612821565b5b5090506128879190612a34565b5090565b8280548282559060005260206000209081019282156128c7579160200282015b828111156128c65782518255916020019190600101906128ab565b5b5090506128d49190612a34565b5090565b82805482825590600052602060002090601f0160209004810192821561296d5791602002820160005b8382111561293e57835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302612901565b801561296b5782816101000a81549060ff021916905560010160208160000104928301926001030261293e565b505b50905061297a9190612a34565b5090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016060815260200160608152602001606081525090565b50805460008255906000526020600020908101906129e89190612a34565b50565b5080546000825590600052602060002090810190612a099190612a34565b50565b50805460008255601f016020900490600052602060002090810190612a319190612a34565b50565b5b80821115612a4d576000816000905550600101612a35565b5090565b6000819050919050565b612a6481612a51565b82525050565b6000602082019050612a7f6000830184612a5b565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ac482612a99565b9050919050565b612ad481612ab9565b8114612adf57600080fd5b50565b600081359050612af181612acb565b92915050565b612b0081612a51565b8114612b0b57600080fd5b50565b600081359050612b1d81612af7565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612b4857612b47612b23565b5b8235905067ffffffffffffffff811115612b6557612b64612b28565b5b602083019150836001820283011115612b8157612b80612b2d565b5b9250929050565b600080600080600060808688031215612ba457612ba3612a8f565b5b6000612bb288828901612ae2565b9550506020612bc388828901612ae2565b9450506040612bd488828901612b0e565b935050606086013567ffffffffffffffff811115612bf557612bf4612a94565b5b612c0188828901612b32565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c4581612c10565b82525050565b6000602082019050612c606000830184612c3c565b92915050565b600060208284031215612c7c57612c7b612a8f565b5b6000612c8a84828501612ae2565b91505092915050565b60008060008060808587031215612cad57612cac612a8f565b5b6000612cbb87828801612ae2565b9450506020612ccc87828801612b0e565b9350506040612cdd87828801612ae2565b9250506060612cee87828801612b0e565b91505092959194509250565b60008060408385031215612d1157612d10612a8f565b5b6000612d1f85828601612b0e565b9250506020612d3085828601612ae2565b9150509250929050565b612d4381612a51565b82525050565b612d5281612ab9565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612d908383612d49565b60208301905092915050565b6000602082019050919050565b6000612db482612d58565b612dbe8185612d63565b9350612dc983612d74565b8060005b83811015612dfa578151612de18882612d84565b9750612dec83612d9c565b925050600181019050612dcd565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612e3f8383612d3a565b60208301905092915050565b6000602082019050919050565b6000612e6382612e07565b612e6d8185612e12565b9350612e7883612e23565b8060005b83811015612ea9578151612e908882612e33565b9750612e9b83612e4b565b925050600181019050612e7c565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b612ef781612ee2565b82525050565b6000612f098383612eee565b60208301905092915050565b6000602082019050919050565b6000612f2d82612eb6565b612f378185612ec1565b9350612f4283612ed2565b8060005b83811015612f73578151612f5a8882612efd565b9750612f6583612f15565b925050600181019050612f46565b5085935050505092915050565b600060c083016000830151612f986000860182612d3a565b506020830151612fab6020860182612d49565b506040830151612fbe6040860182612d3a565b5060608301518482036060860152612fd68282612da9565b91505060808301518482036080860152612ff08282612e58565b91505060a083015184820360a086015261300a8282612f22565b9150508091505092915050565b600060208201905081810360008301526130318184612f80565b905092915050565b60008060006060848603121561305257613051612a8f565b5b600061306086828701612ae2565b935050602061307186828701612b0e565b925050604061308286828701612b0e565b9150509250925092565b600080604083850312156130a3576130a2612a8f565b5b60006130b185828601612ae2565b92505060206130c285828601612b0e565b9150509250929050565b6130d581612ab9565b82525050565b60006020820190506130f060008301846130cc565b92915050565b600060408201905061310b60008301856130cc565b6131186020830184612a5b565b9392505050565b60008151905061312e81612acb565b92915050565b60006020828403121561314a57613149612a8f565b5b60006131588482850161311f565b91505092915050565b600060608201905061317660008301866130cc565b61318360208301856130cc565b6131906040830184612a5b565b949350505050565b60006040820190506131ad6000830185612a5b565b6131ba60208301846130cc565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61320f826131c6565b810181811067ffffffffffffffff8211171561322e5761322d6131d7565b5b80604052505050565b6000613241612a85565b905061324d8282613206565b919050565b600080fd5b60008151905061326681612af7565b92915050565b600067ffffffffffffffff821115613287576132866131d7565b5b602082029050602081019050919050565b60006132ab6132a68461326c565b613237565b905080838252602082019050602084028301858111156132ce576132cd612b2d565b5b835b818110156132f757806132e3888261311f565b8452602084019350506020810190506132d0565b5050509392505050565b600082601f83011261331657613315612b23565b5b8151613326848260208601613298565b91505092915050565b600067ffffffffffffffff82111561334a576133496131d7565b5b602082029050602081019050919050565b600061336e6133698461332f565b613237565b9050808382526020820190506020840283018581111561339157613390612b2d565b5b835b818110156133ba57806133a68882613257565b845260208401935050602081019050613393565b5050509392505050565b600082601f8301126133d9576133d8612b23565b5b81516133e984826020860161335b565b91505092915050565b600067ffffffffffffffff82111561340d5761340c6131d7565b5b602082029050602081019050919050565b61342781612ee2565b811461343257600080fd5b50565b6000815190506134448161341e565b92915050565b600061345d613458846133f2565b613237565b905080838252602082019050602084028301858111156134805761347f612b2d565b5b835b818110156134a957806134958882613435565b845260208401935050602081019050613482565b5050509392505050565b600082601f8301126134c8576134c7612b23565b5b81516134d884826020860161344a565b91505092915050565b600060c082840312156134f7576134f66131c1565b5b61350160c0613237565b9050600061351184828501613257565b60008301525060206135258482850161311f565b602083015250604061353984828501613257565b604083015250606082015167ffffffffffffffff81111561355d5761355c613252565b5b61356984828501613301565b606083015250608082015167ffffffffffffffff81111561358d5761358c613252565b5b613599848285016133c4565b60808301525060a082015167ffffffffffffffff8111156135bd576135bc613252565b5b6135c9848285016134b3565b60a08301525092915050565b6000602082840312156135eb576135ea612a8f565b5b600082015167ffffffffffffffff81111561360957613608612a94565b5b613615848285016134e1565b91505092915050565b600060808201905061363360008301876130cc565b61364060208301866130cc565b61364d6040830185612a5b565b61365a6060830184612a5b565b95945050505050565b600060808201905061367860008301876130cc565b6136856020830186612a5b565b61369260408301856130cc565b61369f6060830184612a5b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061371182612a51565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613743576137426136d7565b5b600182019050919050565b600060608201905061376360008301866130cc565b6137706020830185612a5b565b61377d6040830184612a5b565b949350505050565b600061379082612a51565b915061379b83612a51565b92508282019050808211156137b3576137b26136d7565b5b92915050565b60006137c482612a51565b91506137cf83612a51565b92508282039050818111156137e7576137e66136d7565b5b92915050565b6000819050919050565b6000819050919050565b61381261380d826137ed565b6137f7565b82525050565b60008160601b9050919050565b600061383082613818565b9050919050565b600061384282613825565b9050919050565b61385a61385582612ab9565b613837565b82525050565b6000819050919050565b61387b61387682612a51565b613860565b82525050565b600061388d8286613801565b60208201915061389d8285613849565b6014820191506138ad828461386a565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006138f882612a51565b915061390383612a51565b925082613913576139126138be565b5b828206905092915050565b600061392982612a51565b915061393483612a51565b925082820261394281612a51565b91508282048414831517613959576139586136d7565b5b5092915050565b600061396b82612a51565b915061397683612a51565b925082613986576139856138be565b5b828204905092915050565b600060ff82169050919050565b6139a781613991565b82525050565b600060c0820190506139c260008301896130cc565b6139cf6020830188612a5b565b6139dc60408301876130cc565b6139e9606083018661399e565b6139f66080830185612a5b565b613a0360a0830184612a5b565b979650505050505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613a55601f83613a0e565b9150613a6082613a1f565b602082019050919050565b60006020820190508181036000830152613a8481613a48565b905091905056fea2646970667358221220e21cf50efa397687df006d12af9f06f3eed7bc443355f0f8cf00d3ef1c24203164736f6c63430008140033\n";

    public static final String FUNC_CANCELLISTING = "cancelListing";

    public static final String FUNC_DEALLIST = "dealList";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETINITLISTING = "getInitListing";

    public static final String FUNC_GETLISTING = "getListing";

    public static final String FUNC_GETOFFICIALADDRESS = "getOfficialAddress";

    public static final String FUNC_LISTITEM = "listItem";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_PICKITEM = "pickItem";

    public static final String FUNC_SETOFFICIALADDRESS = "setOfficialAddress";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWOTHER = "withdrawOther";

    public static final Event ITEMCANCELED_EVENT = new Event("ItemCanceled",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMDEAL_EVENT = new Event("ItemDeal",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMLISTED_EVENT = new Event("ItemListed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMPICKED_EVENT = new Event("ItemPicked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ItemCanceledEventResponse> getItemCanceledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMCANCELED_EVENT, transactionReceipt);
        ArrayList<ItemCanceledEventResponse> responses = new ArrayList<ItemCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemCanceledEventResponse typedResponse = new ItemCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemCanceledEventResponse getItemCanceledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMCANCELED_EVENT, log);
        ItemCanceledEventResponse typedResponse = new ItemCanceledEventResponse();
        typedResponse.log = log;
        typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ItemCanceledEventResponse> itemCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemCanceledEventFromLog(log));
    }

    public Flowable<ItemCanceledEventResponse> itemCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMCANCELED_EVENT));
        return itemCanceledEventFlowable(filter);
    }

    public static List<ItemDealEventResponse> getItemDealEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMDEAL_EVENT, transactionReceipt);
        ArrayList<ItemDealEventResponse> responses = new ArrayList<ItemDealEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemDealEventResponse typedResponse = new ItemDealEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer_index = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.sellerAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.shareAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemDealEventResponse getItemDealEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMDEAL_EVENT, log);
        ItemDealEventResponse typedResponse = new ItemDealEventResponse();
        typedResponse.log = log;
        typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer_index = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.sellerAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.shareAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<ItemDealEventResponse> itemDealEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemDealEventFromLog(log));
    }

    public Flowable<ItemDealEventResponse> itemDealEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMDEAL_EVENT));
        return itemDealEventFlowable(filter);
    }

    public static List<ItemListedEventResponse> getItemListedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMLISTED_EVENT, transactionReceipt);
        ArrayList<ItemListedEventResponse> responses = new ArrayList<ItemListedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemListedEventResponse typedResponse = new ItemListedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemListedEventResponse getItemListedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMLISTED_EVENT, log);
        ItemListedEventResponse typedResponse = new ItemListedEventResponse();
        typedResponse.log = log;
        typedResponse.nftOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ItemListedEventResponse> itemListedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemListedEventFromLog(log));
    }

    public Flowable<ItemListedEventResponse> itemListedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMLISTED_EVENT));
        return itemListedEventFlowable(filter);
    }

    public static List<ItemPickedEventResponse> getItemPickedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMPICKED_EVENT, transactionReceipt);
        ArrayList<ItemPickedEventResponse> responses = new ArrayList<ItemPickedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemPickedEventResponse typedResponse = new ItemPickedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.picker = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.pickNum = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemPickedEventResponse getItemPickedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMPICKED_EVENT, log);
        ItemPickedEventResponse typedResponse = new ItemPickedEventResponse();
        typedResponse.log = log;
        typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.picker = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.pickNum = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ItemPickedEventResponse> itemPickedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemPickedEventFromLog(log));
    }

    public Flowable<ItemPickedEventResponse> itemPickedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMPICKED_EVENT));
        return itemPickedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelListing(String nftAddress, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_CANCELLISTING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> dealList(String nftAddress, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_DEALLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getBalance() {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Listing> getInitListing(BigInteger price, String nftRealOwner) {
        final Function function = new Function(FUNC_GETINITLISTING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(price),
                new org.web3j.abi.datatypes.Address(160, nftRealOwner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Listing>() {}));
        return executeRemoteCallSingleValueReturn(function, Listing.class);
    }

    public RemoteFunctionCall<Listing> getListing(String nftAddress, BigInteger tokenId) {
        final Function function = new Function(FUNC_GETLISTING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Listing>() {}));
        return executeRemoteCallSingleValueReturn(function, Listing.class);
    }

    public RemoteFunctionCall<String> getOfficialAddress() {
        final Function function = new Function(FUNC_GETOFFICIALADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> listItem(String nftAddress, BigInteger tokenId, String nftOwner, BigInteger price) {
        final Function function = new Function(
                FUNC_LISTITEM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.Address(160, nftOwner),
                new org.web3j.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(String operator, String from, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_ONERC721RECEIVED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator),
                new org.web3j.abi.datatypes.Address(160, from),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pickItem(String nftAddress, BigInteger tokenId, BigInteger index, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PICKITEM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> setOfficialAddress(String newAddress) {
        final Function function = new Function(
                FUNC_SETOFFICIALADDRESS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw() {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawOther(String add) {
        final Function function = new Function(
                FUNC_WITHDRAWOTHER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, add)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Listing extends DynamicStruct {
        public BigInteger price;

        public String seller;

        public BigInteger pickCount;

        public List<String> pickers;

        public List<BigInteger> pickVals;

        public List<Boolean> status;

        public Listing(BigInteger price, String seller, BigInteger pickCount, List<String> pickers, List<BigInteger> pickVals, List<Boolean> status) {
            super(new org.web3j.abi.datatypes.generated.Uint256(price),
                    new org.web3j.abi.datatypes.Address(160, seller),
                    new org.web3j.abi.datatypes.generated.Uint256(pickCount),
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                            org.web3j.abi.datatypes.Address.class,
                            org.web3j.abi.Utils.typeMap(pickers, org.web3j.abi.datatypes.Address.class)),
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                            org.web3j.abi.datatypes.generated.Uint256.class,
                            org.web3j.abi.Utils.typeMap(pickVals, org.web3j.abi.datatypes.generated.Uint256.class)),
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Bool>(
                            org.web3j.abi.datatypes.Bool.class,
                            org.web3j.abi.Utils.typeMap(status, org.web3j.abi.datatypes.Bool.class)));
            this.price = price;
            this.seller = seller;
            this.pickCount = pickCount;
            this.pickers = pickers;
            this.pickVals = pickVals;
            this.status = status;
        }

        public Listing(Uint256 price, Address seller, Uint256 pickCount, DynamicArray<Address> pickers, DynamicArray<Uint256> pickVals, DynamicArray<Bool> status) {
            super(price, seller, pickCount, pickers, pickVals, status);
            this.price = price.getValue();
            this.seller = seller.getValue();
            this.pickCount = pickCount.getValue();
            this.pickers = pickers.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.pickVals = pickVals.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.status = status.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
        }
    }

    public static class ItemCanceledEventResponse extends BaseEventResponse {
        public String nftAddress;

        public BigInteger tokenId;
    }

    public static class ItemDealEventResponse extends BaseEventResponse {
        public String nftAddress;

        public BigInteger tokenId;

        public String buyer;

        public BigInteger buyer_index;

        public BigInteger sellerAmount;

        public BigInteger shareAmount;
    }

    public static class ItemListedEventResponse extends BaseEventResponse {
        public String nftOwner;

        public String nftAddress;

        public BigInteger tokenId;

        public BigInteger price;
    }

    public static class ItemPickedEventResponse extends BaseEventResponse {
        public String nftAddress;

        public BigInteger tokenId;

        public String picker;

        public BigInteger pickNum;
    }
}
