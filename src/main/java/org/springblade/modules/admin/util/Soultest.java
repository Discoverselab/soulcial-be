package org.springblade.modules.admin.util;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.7.
 */
@SuppressWarnings("rawtypes")
public class Soultest extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040516200311d3803806200311d83398181016040528101906200003791906200044d565b826040518060400160405280600881526020017f736f756c746573740000000000000000000000000000000000000000000000008152506040518060400160405280600881526020017f736f756c746573740000000000000000000000000000000000000000000000008152508160009081620000b5919062000732565b508060019081620000c7919062000732565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013f5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200013691906200082a565b60405180910390fd5b62000150816200018f60201b60201c565b50818160405160200162000166929190620008d9565b6040516020818303038152906040526008908162000185919062000732565b505050506200090e565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002968262000269565b9050919050565b620002a88162000289565b8114620002b457600080fd5b50565b600081519050620002c8816200029d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200032382620002d8565b810181811067ffffffffffffffff82111715620003455762000344620002e9565b5b80604052505050565b60006200035a62000255565b905062000368828262000318565b919050565b600067ffffffffffffffff8211156200038b576200038a620002e9565b5b6200039682620002d8565b9050602081019050919050565b60005b83811015620003c3578082015181840152602081019050620003a6565b60008484015250505050565b6000620003e6620003e0846200036d565b6200034e565b905082815260208101848484011115620004055762000404620002d3565b5b62000412848285620003a3565b509392505050565b600082601f830112620004325762000431620002ce565b5b815162000444848260208601620003cf565b91505092915050565b6000806000606084860312156200046957620004686200025f565b5b60006200047986828701620002b7565b935050602084015167ffffffffffffffff8111156200049d576200049c62000264565b5b620004ab868287016200041a565b925050604084015167ffffffffffffffff811115620004cf57620004ce62000264565b5b620004dd868287016200041a565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200053a57607f821691505b60208210810362000550576200054f620004f2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005ba7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200057b565b620005c686836200057b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620006136200060d6200060784620005de565b620005e8565b620005de565b9050919050565b6000819050919050565b6200062f83620005f2565b620006476200063e826200061a565b84845462000588565b825550505050565b600090565b6200065e6200064f565b6200066b81848462000624565b505050565b5b8181101562000693576200068760008262000654565b60018101905062000671565b5050565b601f821115620006e257620006ac8162000556565b620006b7846200056b565b81016020851015620006c7578190505b620006df620006d6856200056b565b83018262000670565b50505b505050565b600082821c905092915050565b60006200070760001984600802620006e7565b1980831691505092915050565b6000620007228383620006f4565b9150826002028217905092915050565b6200073d82620004e7565b67ffffffffffffffff811115620007595762000758620002e9565b5b62000765825462000521565b6200077282828562000697565b600060209050601f831160018114620007aa576000841562000795578287015190505b620007a1858262000714565b86555062000811565b601f198416620007ba8662000556565b60005b82811015620007e457848901518255600182019150602085019450602081019050620007bd565b8683101562000804578489015162000800601f891682620006f4565b8355505b6001600288020188555050505b505050505050565b620008248162000289565b82525050565b600060208201905062000841600083018462000819565b92915050565b600081905092915050565b60006200085f82620004e7565b6200086b818562000847565b93506200087d818560208601620003a3565b80840191505092915050565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b6000620008c160018362000847565b9150620008ce8262000889565b600182019050919050565b6000620008e7828562000852565b9150620008f5828462000852565b91506200090282620008b2565b91508190509392505050565b6127ff806200091e6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad578063a22cb46511610071578063a22cb46514610306578063b88d4fde14610322578063c87b56dd1461033e578063e985e9c51461036e578063f2fde38b1461039e57610121565b806370a0823114610274578063715018a6146102a45780638da5cb5b146102ae57806395d89b41146102cc578063a1448194146102ea57610121565b806323b872dd116100f457806323b872dd146101c057806339a0c6f9146101dc57806342842e0e146101f8578063589a1743146102145780636352211e1461024457610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190611c73565b6103ba565b60405161014d9190611cbb565b60405180910390f35b61015e6103cc565b60405161016b9190611d66565b60405180910390f35b61018e60048036038101906101899190611dbe565b61045e565b60405161019b9190611e2c565b60405180910390f35b6101be60048036038101906101b99190611e73565b61047a565b005b6101da60048036038101906101d59190611eb3565b610490565b005b6101f660048036038101906101f1919061203b565b610592565b005b610212600480360381019061020d9190611eb3565b6105ad565b005b61022e60048036038101906102299190611dbe565b6105cd565b60405161023b9190611e2c565b60405180910390f35b61025e60048036038101906102599190611dbe565b61060f565b60405161026b9190611e2c565b60405180910390f35b61028e60048036038101906102899190612084565b610621565b60405161029b91906120c0565b60405180910390f35b6102ac6106db565b005b6102b66106ef565b6040516102c39190611e2c565b60405180910390f35b6102d4610719565b6040516102e19190611d66565b60405180910390f35b61030460048036038101906102ff9190611e73565b6107ab565b005b610320600480360381019061031b9190612107565b61084a565b005b61033c600480360381019061033791906121e8565b610860565b005b61035860048036038101906103539190611dbe565b61087d565b6040516103659190611d66565b60405180910390f35b6103886004803603810190610383919061226b565b61088f565b6040516103959190611cbb565b60405180910390f35b6103b860048036038101906103b39190612084565b610923565b005b60006103c5826109a9565b9050919050565b6060600080546103db906122da565b80601f0160208091040260200160405190810160405280929190818152602001828054610407906122da565b80156104545780601f1061042957610100808354040283529160200191610454565b820191906000526020600020905b81548152906001019060200180831161043757829003601f168201915b5050505050905090565b600061046982610a0a565b5061047382610a92565b9050919050565b61048c8282610487610acf565b610ad7565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105025760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016104f99190611e2c565b60405180910390fd5b60006105168383610511610acf565b610ae9565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461058c578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016105839392919061230b565b60405180910390fd5b50505050565b61059a610d03565b80600890816105a991906124ee565b5050565b6105c883838360405180602001604052806000815250610860565b505050565b6000806009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080915050919050565b600061061a82610a0a565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106945760006040517f89c62b6400000000000000000000000000000000000000000000000000000000815260040161068b9190611e2c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106e3610d03565b6106ed6000610d8a565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610728906122da565b80601f0160208091040260200160405190810160405280929190818152602001828054610754906122da565b80156107a15780601f10610776576101008083540402835291602001916107a1565b820191906000526020600020905b81548152906001019060200180831161078457829003601f168201915b5050505050905090565b6107b3610d03565b60006107be82610e50565b6040516020016107ce9190612648565b60405160208183030381529060405290506107e98383610f1e565b6107f38282610f3c565b826009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b61085c610855610acf565b8383610f98565b5050565b61086b848484610490565b61087784848484611107565b50505050565b6060610888826112be565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61092b610d03565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361099d5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109949190611e2c565b60405180910390fd5b6109a681610d8a565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a035750610a02826113d1565b5b9050919050565b600080610a16836114b3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a8957826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610a8091906120c0565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610ae483838360016114f0565b505050565b600080610af5846114b3565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610b3757610b368184866116b5565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bc857610b796000856000806114f0565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610c4b576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b610d0b610acf565b73ffffffffffffffffffffffffffffffffffffffff16610d296106ef565b73ffffffffffffffffffffffffffffffffffffffff1614610d8857610d4c610acf565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d7f9190611e2c565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060006001610e5f84611779565b01905060008167ffffffffffffffff811115610e7e57610e7d611f10565b5b6040519080825280601f01601f191660200182016040528015610eb05781602001600182028036833780820191505090505b509050600082602001820190505b600115610f13578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610f0757610f0661266a565b5b04945060008503610ebe575b819350505050919050565b610f388282604051806020016040528060008152506118cc565b5050565b80600660008481526020019081526020016000209081610f5c91906124ee565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051610f8c91906120c0565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361100957816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016110009190611e2c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110fa9190611cbb565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156112b8578273ffffffffffffffffffffffffffffffffffffffff1663150b7a0261114b610acf565b8685856040518563ffffffff1660e01b815260040161116d94939291906126ee565b6020604051808303816000875af19250505080156111a957506040513d601f19601f820116820180604052508101906111a6919061274f565b60015b61122d573d80600081146111d9576040519150601f19603f3d011682016040523d82523d6000602084013e6111de565b606091505b50600081510361122557836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161121c9190611e2c565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146112b657836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016112ad9190611e2c565b60405180910390fd5b505b50505050565b60606112c982610a0a565b5060006006600084815260200190815260200160002080546112ea906122da565b80601f0160208091040260200160405190810160405280929190818152602001828054611316906122da565b80156113635780601f1061133857610100808354040283529160200191611363565b820191906000526020600020905b81548152906001019060200180831161134657829003601f168201915b5050505050905060006113746118e8565b905060008151036113895781925050506113cc565b6000825111156113be5780826040516020016113a692919061277c565b604051602081830303815290604052925050506113cc565b6113c78461197a565b925050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061149c57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806114ac57506114ab826119e3565b5b9050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b80806115295750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561165d57600061153984610a0a565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156115a457508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156115b757506115b5818461088f565b155b156115f957826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016115f09190611e2c565b60405180910390fd5b811561165b57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6116c0838383611a4d565b61177457600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361173557806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161172c91906120c0565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040161176b9291906127a0565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106117d7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816117cd576117cc61266a565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611814576d04ee2d6d415b85acef8100000000838161180a5761180961266a565b5b0492506020810190505b662386f26fc10000831061184357662386f26fc1000083816118395761183861266a565b5b0492506010810190505b6305f5e100831061186c576305f5e10083816118625761186161266a565b5b0492506008810190505b61271083106118915761271083816118875761188661266a565b5b0492506004810190505b606483106118b457606483816118aa576118a961266a565b5b0492506002810190505b600a83106118c3576001810190505b80915050919050565b6118d68383611b0e565b6118e36000848484611107565b505050565b6060600880546118f7906122da565b80601f0160208091040260200160405190810160405280929190818152602001828054611923906122da565b80156119705780601f1061194557610100808354040283529160200191611970565b820191906000526020600020905b81548152906001019060200180831161195357829003601f168201915b5050505050905090565b606061198582610a0a565b5060006119906118e8565b905060008151116119b057604051806020016040528060008152506119db565b806119ba84610e50565b6040516020016119cb92919061277c565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b0557508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ac65750611ac5848461088f565b5b80611b0457508273ffffffffffffffffffffffffffffffffffffffff16611aec83610a92565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b805760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611b779190611e2c565b60405180910390fd5b6000611b8e83836000610ae9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611c025760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611bf99190611e2c565b60405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611c5081611c1b565b8114611c5b57600080fd5b50565b600081359050611c6d81611c47565b92915050565b600060208284031215611c8957611c88611c11565b5b6000611c9784828501611c5e565b91505092915050565b60008115159050919050565b611cb581611ca0565b82525050565b6000602082019050611cd06000830184611cac565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d10578082015181840152602081019050611cf5565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d3882611cd6565b611d428185611ce1565b9350611d52818560208601611cf2565b611d5b81611d1c565b840191505092915050565b60006020820190508181036000830152611d808184611d2d565b905092915050565b6000819050919050565b611d9b81611d88565b8114611da657600080fd5b50565b600081359050611db881611d92565b92915050565b600060208284031215611dd457611dd3611c11565b5b6000611de284828501611da9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e1682611deb565b9050919050565b611e2681611e0b565b82525050565b6000602082019050611e416000830184611e1d565b92915050565b611e5081611e0b565b8114611e5b57600080fd5b50565b600081359050611e6d81611e47565b92915050565b60008060408385031215611e8a57611e89611c11565b5b6000611e9885828601611e5e565b9250506020611ea985828601611da9565b9150509250929050565b600080600060608486031215611ecc57611ecb611c11565b5b6000611eda86828701611e5e565b9350506020611eeb86828701611e5e565b9250506040611efc86828701611da9565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f4882611d1c565b810181811067ffffffffffffffff82111715611f6757611f66611f10565b5b80604052505050565b6000611f7a611c07565b9050611f868282611f3f565b919050565b600067ffffffffffffffff821115611fa657611fa5611f10565b5b611faf82611d1c565b9050602081019050919050565b82818337600083830152505050565b6000611fde611fd984611f8b565b611f70565b905082815260208101848484011115611ffa57611ff9611f0b565b5b612005848285611fbc565b509392505050565b600082601f83011261202257612021611f06565b5b8135612032848260208601611fcb565b91505092915050565b60006020828403121561205157612050611c11565b5b600082013567ffffffffffffffff81111561206f5761206e611c16565b5b61207b8482850161200d565b91505092915050565b60006020828403121561209a57612099611c11565b5b60006120a884828501611e5e565b91505092915050565b6120ba81611d88565b82525050565b60006020820190506120d560008301846120b1565b92915050565b6120e481611ca0565b81146120ef57600080fd5b50565b600081359050612101816120db565b92915050565b6000806040838503121561211e5761211d611c11565b5b600061212c85828601611e5e565b925050602061213d858286016120f2565b9150509250929050565b600067ffffffffffffffff82111561216257612161611f10565b5b61216b82611d1c565b9050602081019050919050565b600061218b61218684612147565b611f70565b9050828152602081018484840111156121a7576121a6611f0b565b5b6121b2848285611fbc565b509392505050565b600082601f8301126121cf576121ce611f06565b5b81356121df848260208601612178565b91505092915050565b6000806000806080858703121561220257612201611c11565b5b600061221087828801611e5e565b945050602061222187828801611e5e565b935050604061223287828801611da9565b925050606085013567ffffffffffffffff81111561225357612252611c16565b5b61225f878288016121ba565b91505092959194509250565b6000806040838503121561228257612281611c11565b5b600061229085828601611e5e565b92505060206122a185828601611e5e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806122f257607f821691505b602082108103612305576123046122ab565b5b50919050565b60006060820190506123206000830186611e1d565b61232d60208301856120b1565b61233a6040830184611e1d565b949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026123a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612367565b6123ae8683612367565b95508019841693508086168417925050509392505050565b6000819050919050565b60006123eb6123e66123e184611d88565b6123c6565b611d88565b9050919050565b6000819050919050565b612405836123d0565b612419612411826123f2565b848454612374565b825550505050565b600090565b61242e612421565b6124398184846123fc565b505050565b5b8181101561245d57612452600082612426565b60018101905061243f565b5050565b601f8211156124a25761247381612342565b61247c84612357565b8101602085101561248b578190505b61249f61249785612357565b83018261243e565b50505b505050565b600082821c905092915050565b60006124c5600019846008026124a7565b1980831691505092915050565b60006124de83836124b4565b9150826002028217905092915050565b6124f782611cd6565b67ffffffffffffffff8111156125105761250f611f10565b5b61251a82546122da565b612525828285612461565b600060209050601f8311600181146125585760008415612546578287015190505b61255085826124d2565b8655506125b8565b601f19841661256686612342565b60005b8281101561258e57848901518255600182019150602085019450602081019050612569565b868310156125ab57848901516125a7601f8916826124b4565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006125d682611cd6565b6125e081856125c0565b93506125f0818560208601611cf2565b80840191505092915050565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b60006126326001836125c0565b915061263d826125fc565b600182019050919050565b600061265482846125cb565b915061265f82612625565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b60006126c082612699565b6126ca81856126a4565b93506126da818560208601611cf2565b6126e381611d1c565b840191505092915050565b60006080820190506127036000830187611e1d565b6127106020830186611e1d565b61271d60408301856120b1565b818103606083015261272f81846126b5565b905095945050505050565b60008151905061274981611c47565b92915050565b60006020828403121561276557612764611c11565b5b60006127738482850161273a565b91505092915050565b600061278882856125cb565b915061279482846125cb565b91508190509392505050565b60006040820190506127b56000830185611e1d565b6127c260208301846120b1565b939250505056fea26469706673582212205100c5904c6b56117fed94e763a9643c64404839bb77705ac99ad3dbcc77f3c364736f6c63430008140033\n";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_CHANGEBASEURI = "changeBaseURI";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFEMINT = "safeMint";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CREATOROF = "creatorOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected Soultest(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Soultest(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Soultest(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Soultest(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeBaseURI(String newBaseURI) {
        final Function function = new Function(
                FUNC_CHANGEBASEURI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newBaseURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BatchMetadataUpdateEventResponse getBatchMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
        BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBatchMetadataUpdateEventFromLog(log));
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public static List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MetadataUpdateEventResponse getMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, log);
        MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMetadataUpdateEventFromLog(log));
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_SAFEMINT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                new org.web3j.abi.datatypes.Address(160, to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                new org.web3j.abi.datatypes.Address(160, to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator),
                new org.web3j.abi.datatypes.Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                new org.web3j.abi.datatypes.Address(160, to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> creatorOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_CREATOROF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner),
                new org.web3j.abi.datatypes.Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Soultest load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Soultest(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Soultest load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Soultest(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Soultest load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Soultest(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Soultest load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Soultest(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Soultest> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String initialOwner, String baseURI_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, initialOwner),
                new org.web3j.abi.datatypes.Utf8String(baseURI_),
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(Soultest.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Soultest> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String initialOwner, String baseURI_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, initialOwner),
                new org.web3j.abi.datatypes.Utf8String(baseURI_),
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(Soultest.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Soultest> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String initialOwner, String baseURI_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, initialOwner),
                new org.web3j.abi.datatypes.Utf8String(baseURI_),
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(Soultest.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Soultest> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String initialOwner, String baseURI_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, initialOwner),
                new org.web3j.abi.datatypes.Utf8String(baseURI_),
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(Soultest.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
