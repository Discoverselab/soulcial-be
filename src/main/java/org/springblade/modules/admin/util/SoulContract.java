package org.springblade.modules.admin.util;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SoulContract extends Contract {
    private static final String BINARY = "60a06040523480156200001157600080fd5b50604051620040ab380380620040ab8339818101604052810190620000379190620002e7565b8382828273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505081600090816200007f919062000601565b50806001908162000091919062000601565b505050506000600a60006101000a81548160ff0219169083151502179055508281604051602001620000c59291906200077a565b604051602081830303815290604052600b9081620000e4919062000601565b5050505050620007af565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001308262000103565b9050919050565b620001428162000123565b81146200014e57600080fd5b50565b600081519050620001628162000137565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001bd8262000172565b810181811067ffffffffffffffff82111715620001df57620001de62000183565b5b80604052505050565b6000620001f4620000ef565b9050620002028282620001b2565b919050565b600067ffffffffffffffff82111562000225576200022462000183565b5b620002308262000172565b9050602081019050919050565b60005b838110156200025d57808201518184015260208101905062000240565b60008484015250505050565b6000620002806200027a8462000207565b620001e8565b9050828152602081018484840111156200029f576200029e6200016d565b5b620002ac8482856200023d565b509392505050565b600082601f830112620002cc57620002cb62000168565b5b8151620002de84826020860162000269565b91505092915050565b60008060008060808587031215620003045762000303620000f9565b5b6000620003148782880162000151565b945050602085015167ffffffffffffffff811115620003385762000337620000fe565b5b6200034687828801620002b4565b935050604085015167ffffffffffffffff8111156200036a5762000369620000fe565b5b6200037887828801620002b4565b925050606085015167ffffffffffffffff8111156200039c576200039b620000fe565b5b620003aa87828801620002b4565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200040957607f821691505b6020821081036200041f576200041e620003c1565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200044a565b6200049586836200044a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004e2620004dc620004d684620004ad565b620004b7565b620004ad565b9050919050565b6000819050919050565b620004fe83620004c1565b620005166200050d82620004e9565b84845462000457565b825550505050565b600090565b6200052d6200051e565b6200053a818484620004f3565b505050565b5b8181101562000562576200055660008262000523565b60018101905062000540565b5050565b601f821115620005b1576200057b8162000425565b62000586846200043a565b8101602085101562000596578190505b620005ae620005a5856200043a565b8301826200053f565b50505b505050565b600082821c905092915050565b6000620005d660001984600802620005b6565b1980831691505092915050565b6000620005f18383620005c3565b9150826002028217905092915050565b6200060c82620003b6565b67ffffffffffffffff81111562000628576200062762000183565b5b620006348254620003f0565b6200064182828562000566565b600060209050601f83116001811462000679576000841562000664578287015190505b620006708582620005e3565b865550620006e0565b601f198416620006898662000425565b60005b82811015620006b3578489015182556001820191506020850194506020810190506200068c565b86831015620006d35784890151620006cf601f891682620005c3565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006200070082620003b6565b6200070c8185620006e8565b93506200071e8185602086016200023d565b80840191505092915050565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b600062000762600183620006e8565b91506200076f826200072a565b600182019050919050565b6000620007888285620006f3565b9150620007968284620006f3565b9150620007a38262000753565b91508190509392505050565b6080516138af620007fc600039600081816107fa0152818161095a01528181610a7601528181610bf201528181610ebd01528181610feb01528181611220015261128301526138af6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80635c975abb116100b8578063a22cb4651161007c578063a22cb46514610375578063b88d4fde14610391578063c87b56dd146103ad578063d431b1ac146103dd578063e985e9c5146103e7578063f851a4401461041757610142565b80635c975abb146102bd5780636352211e146102db57806370a082311461030b57806395d89b411461033b578063a14481941461035957610142565b806323b872dd1161010a57806323b872dd146101ff5780632f745c591461021b57806339a0c6f91461024b57806342842e0e146102675780634f6ccce7146102835780634f842143146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c91906121f4565b610435565b60405161016e919061223c565b60405180910390f35b61017f6104af565b60405161018c91906122e7565b60405180910390f35b6101af60048036038101906101aa919061233f565b610541565b6040516101bc91906123ad565b60405180910390f35b6101df60048036038101906101da91906123f4565b6105c6565b005b6101e96106dd565b6040516101f69190612443565b60405180910390f35b6102196004803603810190610214919061245e565b6106ea565b005b610235600480360381019061023091906123f4565b610753565b6040516102429190612443565b60405180910390f35b610265600480360381019061026091906125e6565b6107f8565b005b610281600480360381019061027c919061245e565b6108c7565b005b61029d6004803603810190610298919061233f565b6108e7565b6040516102aa9190612443565b60405180910390f35b6102bb610958565b005b6102c56109f0565b6040516102d2919061223c565b60405180910390f35b6102f560048036038101906102f0919061233f565b610a07565b60405161030291906123ad565b60405180910390f35b6103256004803603810190610320919061262f565b610aa7565b6040516103329190612443565b60405180910390f35b610343610b5e565b60405161035091906122e7565b60405180910390f35b610373600480360381019061036e91906123f4565b610bf0565b005b61038f600480360381019061038a9190612688565b610c9c565b005b6103ab60048036038101906103a69190612769565b610e1c565b005b6103c760048036038101906103c2919061233f565b610e87565b6040516103d491906122e7565b60405180910390f35b6103e5610ebb565b005b61040160048036038101906103fc91906127ec565b610f53565b60405161040e919061223c565b60405180910390f35b61041f610fe7565b60405161042c91906123ad565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a857506104a78261100f565b5b9050919050565b6060600080546104be9061285b565b80601f01602080910402602001604051908101604052809291908181526020018280546104ea9061285b565b80156105375780601f1061050c57610100808354040283529160200191610537565b820191906000526020600020905b81548152906001019060200180831161051a57829003601f168201915b5050505050905090565b600061054c826110f1565b61058b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610582906128fe565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105d182610a07565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063890612990565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661066061115d565b73ffffffffffffffffffffffffffffffffffffffff16148061068f575061068e8161068961115d565b610f53565b5b6106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c590612a22565b60405180910390fd5b6106d88383611165565b505050565b6000600880549050905090565b6106f38161121e565b6107046106fe61115d565b826112ad565b610743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a90612ab4565b60405180910390fd5b61074e83838361138b565b505050565b600061075e83610aa7565b821061079f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079690612b46565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d90612bb2565b60405180910390fd5b6000610890610b5e565b905081816040516020016108a5929190612c5a565b604051602081830303815290604052600b90816108c29190612e35565b505050565b6108e283838360405180602001604052806000815250610e1c565b505050565b60006108f16106dd565b8210610932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092990612f79565b60405180910390fd5b6008828154811061094657610945612f99565b5b90600052602060002001549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dd90612bb2565b60405180910390fd5b6109ee6115e6565b565b6000600a60009054906101000a900460ff16905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a9d577f0000000000000000000000000000000000000000000000000000000000000000915050610aa2565b809150505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0e9061303a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610b6d9061285b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b999061285b565b8015610be65780601f10610bbb57610100808354040283529160200191610be6565b820191906000526020600020905b815481529060010190602001808311610bc957829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7590612bb2565b60405180910390fd5b610c98828260405180602001604052806000815250611688565b5050565b610ca461115d565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d08906130a6565b60405180910390fd5b8060056000610d1e61115d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610dcb61115d565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610e10919061223c565b60405180910390a35050565b610e258261121e565b610e36610e3061115d565b836112ad565b610e75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6c90612ab4565b60405180910390fd5b610e81848484846116e3565b50505050565b6060600b610e948361173f565b604051602001610ea5929190613149565b6040516020818303038152906040529050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4090612bb2565b60405180910390fd5b610f5161189f565b565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110da57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110ea57506110e982611942565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111d883610a07565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036112aa5761127a816110f1565b6112a9576112a87f0000000000000000000000000000000000000000000000000000000000000000826119ac565b5b5b50565b60006112b8826110f1565b6112f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ee906131df565b60405180910390fd5b600061130283610a07565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061137157508373ffffffffffffffffffffffffffffffffffffffff1661135984610541565b73ffffffffffffffffffffffffffffffffffffffff16145b8061138257506113818185610f53565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113ab82610a07565b73ffffffffffffffffffffffffffffffffffffffff1614611401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f890613271565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146790613303565b60405180910390fd5b61147b838383611b79565b611486600082611165565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114d69190613352565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461152d9190613386565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6115ee6109f0565b61162d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162490613406565b60405180910390fd5b6000600a60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61167161115d565b60405161167e91906123ad565b60405180910390a1565b61169283836119ac565b61169f6000848484611bd1565b6116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d590613498565b60405180910390fd5b505050565b6116ee84848461138b565b6116fa84848484611bd1565b611739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173090613498565b60405180910390fd5b50505050565b606060008203611786576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061189a565b600082905060005b600082146117b85780806117a1906134b8565b915050600a826117b1919061352f565b915061178e565b60008167ffffffffffffffff8111156117d4576117d36124bb565b5b6040519080825280601f01601f1916602001820160405280156118065781602001600182028036833780820191505090505b5090505b600085146118935760018261181f9190613352565b9150600a8561182e9190613560565b603061183a9190613386565b60f81b8183815181106118505761184f612f99565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561188c919061352f565b945061180a565b8093505050505b919050565b6118a76109f0565b156118e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118de906135dd565b60405180910390fd5b6001600a60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861192b61115d565b60405161193891906123ad565b60405180910390a1565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1290613649565b60405180910390fd5b611a24816110f1565b15611a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5b906136b5565b60405180910390fd5b611a7060008383611b79565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ac09190613386565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b611b84838383611d58565b611b8c6109f0565b15611bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc390613747565b60405180910390fd5b505050565b6000611bf28473ffffffffffffffffffffffffffffffffffffffff16611e6a565b15611d4b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c1b61115d565b8786866040518563ffffffff1660e01b8152600401611c3d94939291906137bc565b6020604051808303816000875af1925050508015611c7957506040513d601f19601f82011682018060405250810190611c76919061381d565b60015b611cfb573d8060008114611ca9576040519150601f19603f3d011682016040523d82523d6000602084013e611cae565b606091505b506000815103611cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cea90613498565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d50565b600190505b949350505050565b611d63838383611e7d565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611da557611da081611e82565b611de4565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611de357611de28382611ecb565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e2657611e2181612038565b611e65565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611e6457611e638282612109565b5b5b505050565b600080823b905060008111915050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001611ed884610aa7565b611ee29190613352565b9050600060076000848152602001908152602001600020549050818114611fc7576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061204c9190613352565b905060006009600084815260200190815260200160002054905060006008838154811061207c5761207b612f99565b5b90600052602060002001549050806008838154811061209e5761209d612f99565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806120ed576120ec61384a565b5b6001900381819060005260206000200160009055905550505050565b600061211483610aa7565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6121d18161219c565b81146121dc57600080fd5b50565b6000813590506121ee816121c8565b92915050565b60006020828403121561220a57612209612192565b5b6000612218848285016121df565b91505092915050565b60008115159050919050565b61223681612221565b82525050565b6000602082019050612251600083018461222d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612291578082015181840152602081019050612276565b60008484015250505050565b6000601f19601f8301169050919050565b60006122b982612257565b6122c38185612262565b93506122d3818560208601612273565b6122dc8161229d565b840191505092915050565b6000602082019050818103600083015261230181846122ae565b905092915050565b6000819050919050565b61231c81612309565b811461232757600080fd5b50565b60008135905061233981612313565b92915050565b60006020828403121561235557612354612192565b5b60006123638482850161232a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123978261236c565b9050919050565b6123a78161238c565b82525050565b60006020820190506123c2600083018461239e565b92915050565b6123d18161238c565b81146123dc57600080fd5b50565b6000813590506123ee816123c8565b92915050565b6000806040838503121561240b5761240a612192565b5b6000612419858286016123df565b925050602061242a8582860161232a565b9150509250929050565b61243d81612309565b82525050565b60006020820190506124586000830184612434565b92915050565b60008060006060848603121561247757612476612192565b5b6000612485868287016123df565b9350506020612496868287016123df565b92505060406124a78682870161232a565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124f38261229d565b810181811067ffffffffffffffff82111715612512576125116124bb565b5b80604052505050565b6000612525612188565b905061253182826124ea565b919050565b600067ffffffffffffffff821115612551576125506124bb565b5b61255a8261229d565b9050602081019050919050565b82818337600083830152505050565b600061258961258484612536565b61251b565b9050828152602081018484840111156125a5576125a46124b6565b5b6125b0848285612567565b509392505050565b600082601f8301126125cd576125cc6124b1565b5b81356125dd848260208601612576565b91505092915050565b6000602082840312156125fc576125fb612192565b5b600082013567ffffffffffffffff81111561261a57612619612197565b5b612626848285016125b8565b91505092915050565b60006020828403121561264557612644612192565b5b6000612653848285016123df565b91505092915050565b61266581612221565b811461267057600080fd5b50565b6000813590506126828161265c565b92915050565b6000806040838503121561269f5761269e612192565b5b60006126ad858286016123df565b92505060206126be85828601612673565b9150509250929050565b600067ffffffffffffffff8211156126e3576126e26124bb565b5b6126ec8261229d565b9050602081019050919050565b600061270c612707846126c8565b61251b565b905082815260208101848484011115612728576127276124b6565b5b612733848285612567565b509392505050565b600082601f8301126127505761274f6124b1565b5b81356127608482602086016126f9565b91505092915050565b6000806000806080858703121561278357612782612192565b5b6000612791878288016123df565b94505060206127a2878288016123df565b93505060406127b38782880161232a565b925050606085013567ffffffffffffffff8111156127d4576127d3612197565b5b6127e08782880161273b565b91505092959194509250565b6000806040838503121561280357612802612192565b5b6000612811858286016123df565b9250506020612822858286016123df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061287357607f821691505b6020821081036128865761288561282c565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006128e8602c83612262565b91506128f38261288c565b604082019050919050565b60006020820190508181036000830152612917816128db565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061297a602183612262565b91506129858261291e565b604082019050919050565b600060208201905081810360008301526129a98161296d565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612a0c603883612262565b9150612a17826129b0565b604082019050919050565b60006020820190508181036000830152612a3b816129ff565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000612a9e603183612262565b9150612aa982612a42565b604082019050919050565b60006020820190508181036000830152612acd81612a91565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000612b30602b83612262565b9150612b3b82612ad4565b604082019050919050565b60006020820190508181036000830152612b5f81612b23565b9050919050565b7f726573747269637420746f2061646d696e000000000000000000000000000000600082015250565b6000612b9c601183612262565b9150612ba782612b66565b602082019050919050565b60006020820190508181036000830152612bcb81612b8f565b9050919050565b600081905092915050565b6000612be882612257565b612bf28185612bd2565b9350612c02818560208601612273565b80840191505092915050565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612c44600183612bd2565b9150612c4f82612c0e565b600182019050919050565b6000612c668285612bdd565b9150612c728284612bdd565b9150612c7d82612c37565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612ceb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612cae565b612cf58683612cae565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612d32612d2d612d2884612309565b612d0d565b612309565b9050919050565b6000819050919050565b612d4c83612d17565b612d60612d5882612d39565b848454612cbb565b825550505050565b600090565b612d75612d68565b612d80818484612d43565b505050565b5b81811015612da457612d99600082612d6d565b600181019050612d86565b5050565b601f821115612de957612dba81612c89565b612dc384612c9e565b81016020851015612dd2578190505b612de6612dde85612c9e565b830182612d85565b50505b505050565b600082821c905092915050565b6000612e0c60001984600802612dee565b1980831691505092915050565b6000612e258383612dfb565b9150826002028217905092915050565b612e3e82612257565b67ffffffffffffffff811115612e5757612e566124bb565b5b612e61825461285b565b612e6c828285612da8565b600060209050601f831160018114612e9f5760008415612e8d578287015190505b612e978582612e19565b865550612eff565b601f198416612ead86612c89565b60005b82811015612ed557848901518255600182019150602085019450602081019050612eb0565b86831015612ef25784890151612eee601f891682612dfb565b8355505b6001600288020188555050505b505050505050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000612f63602c83612262565b9150612f6e82612f07565b604082019050919050565b60006020820190508181036000830152612f9281612f56565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613024602a83612262565b915061302f82612fc8565b604082019050919050565b6000602082019050818103600083015261305381613017565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613090601983612262565b915061309b8261305a565b602082019050919050565b600060208201905081810360008301526130bf81613083565b9050919050565b600081546130d38161285b565b6130dd8186612bd2565b945060018216600081146130f8576001811461310d57613140565b60ff1983168652811515820286019350613140565b61311685612c89565b60005b8381101561313857815481890152600182019150602081019050613119565b838801955050505b50505092915050565b600061315582856130c6565b91506131618284612bdd565b91508190509392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006131c9602c83612262565b91506131d48261316d565b604082019050919050565b600060208201905081810360008301526131f8816131bc565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b600061325b602983612262565b9150613266826131ff565b604082019050919050565b6000602082019050818103600083015261328a8161324e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006132ed602483612262565b91506132f882613291565b604082019050919050565b6000602082019050818103600083015261331c816132e0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061335d82612309565b915061336883612309565b92508282039050818111156133805761337f613323565b5b92915050565b600061339182612309565b915061339c83612309565b92508282019050808211156133b4576133b3613323565b5b92915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006133f0601483612262565b91506133fb826133ba565b602082019050919050565b6000602082019050818103600083015261341f816133e3565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613482603283612262565b915061348d82613426565b604082019050919050565b600060208201905081810360008301526134b181613475565b9050919050565b60006134c382612309565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134f5576134f4613323565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061353a82612309565b915061354583612309565b92508261355557613554613500565b5b828204905092915050565b600061356b82612309565b915061357683612309565b92508261358657613585613500565b5b828206905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006135c7601083612262565b91506135d282613591565b602082019050919050565b600060208201905081810360008301526135f6816135ba565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613633602083612262565b915061363e826135fd565b602082019050919050565b6000602082019050818103600083015261366281613626565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061369f601c83612262565b91506136aa82613669565b602082019050919050565b600060208201905081810360008301526136ce81613692565b9050919050565b7f4252433732315061757361626c653a20746f6b656e207472616e73666572207760008201527f68696c6520706175736564000000000000000000000000000000000000000000602082015250565b6000613731602b83612262565b915061373c826136d5565b604082019050919050565b6000602082019050818103600083015261376081613724565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061378e82613767565b6137988185613772565b93506137a8818560208601612273565b6137b18161229d565b840191505092915050565b60006080820190506137d1600083018761239e565b6137de602083018661239e565b6137eb6040830185612434565b81810360608301526137fd8184613783565b905095945050505050565b600081519050613817816121c8565b92915050565b60006020828403121561383357613832612192565b5b600061384184828501613808565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122030ada99fbedcc5566bee84bdde81d1a7425e586023934cdcbc6eb294b106caab64736f6c63430008120033";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CHANGEBASEURI = "changeBaseURI";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_SAFEMINT = "safeMint";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETPAUSE = "setPause";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_UNSETPAUSE = "unsetPause";

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected SoulContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SoulContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SoulContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SoulContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> admin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADMIN,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BALANCEOF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeBaseURI(String newBaseURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGEBASEURI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newBaseURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETAPPROVED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner),
                new org.web3j.abi.datatypes.Address(operator)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NAME,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OWNEROF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSED,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeMint(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from),
                new org.web3j.abi.datatypes.Address(to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from),
                new org.web3j.abi.datatypes.Address(to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator),
                new org.web3j.abi.datatypes.Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setPause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPAUSE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENBYINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENOFOWNERBYINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner),
                new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENURI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from),
                new org.web3j.abi.datatypes.Address(to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unsetPause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNSETPAUSE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SoulContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SoulContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SoulContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SoulContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SoulContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SoulContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SoulContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SoulContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SoulContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String admin_, String baseURI_, String name_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(admin_),
                new org.web3j.abi.datatypes.Utf8String(baseURI_),
                new org.web3j.abi.datatypes.Utf8String(name_),
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(SoulContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SoulContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String admin_, String baseURI_, String name_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(admin_),
                new org.web3j.abi.datatypes.Utf8String(baseURI_),
                new org.web3j.abi.datatypes.Utf8String(name_),
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(SoulContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SoulContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String admin_, String baseURI_, String name_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(admin_),
                new org.web3j.abi.datatypes.Utf8String(baseURI_),
                new org.web3j.abi.datatypes.Utf8String(name_),
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(SoulContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SoulContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String admin_, String baseURI_, String name_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(admin_),
                new org.web3j.abi.datatypes.Utf8String(baseURI_),
                new org.web3j.abi.datatypes.Utf8String(name_),
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(SoulContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public Log log;

        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class PausedEventResponse {
        public Log log;

        public String account;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse {
        public Log log;

        public String account;
    }
}
