package org.springblade.modules.admin.util;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.7.
 */
@SuppressWarnings("rawtypes")
public class Market2 extends Contract {
    public static final String BINARY = "608060405273478e3634addccb19ae7e48af92ddd575d46fe74760015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015610063575f80fd5b5060015f819055503360025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506145c9806100b85f395ff3fe6080604052600436106100e7575f3560e01c806376ee029011610089578063911fc1cb11610058578063911fc1cb146102c5578063a6f9dae1146102ef578063b2ddee0614610317578063df37e7041461033f576100e7565b806376ee02901461021b578063876a3fc41461024357806388700d1c1461025f578063893d20e81461029b576100e7565b806324cc5f6b116100c557806324cc5f6b146101795780633535db22146101a15780633ccfd60b146101c957806361659375146101df576100e7565b806312065fe0146100eb578063150b7a02146101155780631bd43be314610151575b5f80fd5b3480156100f6575f80fd5b506100ff610367565b60405161010c919061342a565b60405180910390f35b348015610120575f80fd5b5061013b60048036038101906101369190613539565b61036e565b60405161014891906135f7565b60405180910390f35b34801561015c575f80fd5b5061017760048036038101906101729190613610565b610382565b005b348015610184575f80fd5b5061019f600480360381019061019a919061363b565b610421565b005b3480156101ac575f80fd5b506101c760048036038101906101c2919061368b565b6106df565b005b3480156101d4575f80fd5b506101dd610d67565b005b3480156101ea575f80fd5b50610205600480360381019061020091906136ef565b610e05565b6040516102129190613a0b565b60405180910390f35b348015610226575f80fd5b50610241600480360381019061023c9190613b73565b610f87565b005b61025d60048036038101906102589190613bdf565b6118fa565b005b34801561026a575f80fd5b5061028560048036038101906102809190613c43565b61233b565b6040516102929190613a0b565b60405180910390f35b3480156102a6575f80fd5b506102af6125db565b6040516102bc9190613c90565b60405180910390f35b3480156102d0575f80fd5b506102d9612603565b6040516102e69190613c90565b60405180910390f35b3480156102fa575f80fd5b5061031560048036038101906103109190613610565b61262b565b005b348015610322575f80fd5b5061033d60048036038101906103389190613c43565b6126c6565b005b34801561034a575f80fd5b5061036560048036038101906103609190613610565b612c3b565b005b5f47905090565b5f63150b7a0260e01b905095945050505050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103da575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f1935050505015801561041d573d5f803e3d5ffd5b5050565b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f2090503373ffffffffffffffffffffffffffffffffffffffff1681600301838154811061049d5761049c613ca9565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461052357838333846040517f9ae2281a00000000000000000000000000000000000000000000000000000000815260040161051a9493929190613cd6565b60405180910390fd5b5f81600601838154811061053a57610539613ca9565b5b905f5260205f2090602091828204019190066101000a81548160ff0219169083151502179055506001816002015f8282546105759190613d46565b925050819055505f81600501838154811061059357610592613ca9565b5b905f5260205f2001819055505f8160040183815481106105b6576105b5613ca9565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f81600301838154811061061257610611613ca9565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff166108fc825f015490811502906040515f60405180830381858888f1935050505015801561069d573d5f803e3d5ffd5b507ff19ae8a34a46bb28b26694d3a885e5d312908dfe47f4bb261898801f190cc5dc8383336040516106d193929190613d79565b60405180910390a150505050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610737575f80fd5b83835f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060e00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561087b57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610832575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561090657602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108bd575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561095c57602002820191905f5260205f20905b815481526020019060010190808311610948575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156109d557602002820191905f5260205f20905f905b82829054906101000a900460ff161515815260200190600101906020825f010492830192600103820291508084116109a05790505b50505050508152505090505f815f01511115610a2a5782826040517f4a5568d5000000000000000000000000000000000000000000000000000000008152600401610a21929190613dae565b60405180910390fd5b5f8790505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b8152600401610a68919061342a565b602060405180830381865afa158015610a83573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aa79190613de9565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b1d578689896040517f6282431f000000000000000000000000000000000000000000000000000000008152600401610b1493929190613e14565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166342842e0e82308b6040518463ffffffff1660e01b8152600401610b5a93929190613e14565b5f604051808303815f87803b158015610b71575f80fd5b505af1158015610b83573d5f803e3d5ffd5b505050503073ffffffffffffffffffffffffffffffffffffffff16636165937587836040518363ffffffff1660e01b8152600401610bc2929190613e49565b5f60405180830381865afa158015610bdc573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610c0491906141ec565b60035f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003019080519060200190610cc49291906131d3565b506080820151816004019080519060200190610ce19291906131d3565b5060a0820151816005019080519060200190610cfe92919061325a565b5060c0820151816006019080519060200190610d1b9291906132a5565b509050507fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de4818a8a89604051610d549493929190614233565b60405180910390a1505050505050505050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dbf575f80fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f19350505050158015610e02573d5f803e3d5ffd5b50565b610e0d613346565b5f6040518060e001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020015f8152602001600467ffffffffffffffff811115610e5c57610e5b613a3b565b5b604051908082528060200260200182016040528015610e8a5781602001602082028036833780820191505090505b508152602001600467ffffffffffffffff811115610eab57610eaa613a3b565b5b604051908082528060200260200182016040528015610ed95781602001602082028036833780820191505090505b508152602001600467ffffffffffffffff811115610efa57610ef9613a3b565b5b604051908082528060200260200182016040528015610f285781602001602082028036833780820191505090505b508152602001600467ffffffffffffffff811115610f4957610f48613a3b565b5b604051908082528060200260200182016040528015610f775781602001602082028036833780820191505090505b5081525090508091505092915050565b610f8f612cd6565b82825f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060e00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156110d357602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161108a575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561115e57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611115575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156111b457602002820191905f5260205f20905b8154815260200190600101908083116111a0575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561122d57602002820191905f5260205f20905f905b82829054906101000a900460ff161515815260200190600101906020825f010492830192600103820291508084116111f85790505b50505050508152505090505f815f0151116112815782826040517f6831488c000000000000000000000000000000000000000000000000000000008152600401611278929190613dae565b60405180910390fd5b6004816040015110156112cd5782826040517f05a319460000000000000000000000000000000000000000000000000000000081526004016112c4929190613dae565b60405180910390fd5b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611325575f80fd5b5f60035f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8781526020019081526020015f206040518060e00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561146757602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161141e575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156114f257602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116114a9575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561154857602002820191905f5260205f20905b815481526020019060010190808311611534575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156115c157602002820191905f5260205f20905f905b82829054906101000a900460ff161515815260200190600101906020825f0104928301926001038202915080841161158c5790505b50505050508152505090505f60046001436115dc9190613d46565b4089896040516020016115f193929190614304565b604051602081830303815290604052805190602001205f1c611613919061436d565b90505f8260a001518260ff16815181106116305761162f613ca9565b5b602002602001015190505f8990505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e8b6040518263ffffffff1660e01b8152600401611678919061342a565b602060405180830381865afa158015611693573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116b79190613de9565b90508073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461172d57308b8b6040517f6282431f00000000000000000000000000000000000000000000000000000000815260040161172493929190613e14565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166342842e0e3087606001518760ff168151811061176457611763613ca9565b5b60200260200101518d6040518463ffffffff1660e01b815260040161178b93929190613e14565b5f604051808303815f87803b1580156117a2575f80fd5b505af11580156117b4573d5f803e3d5ffd5b505050506117c98b8b87868860ff168e612d23565b60035f8c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8b81526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f6118589190613396565b600482015f6118679190613396565b600582015f61187691906133b4565b600682015f61188591906133d2565b50507faafb11a89970b88827cbd60313a1c19b7743d2acbdbdfce13ed0af6b510a5ebf8b8b87606001518760ff16815181106118c4576118c3613ca9565b5b6020026020010151876040516118dd94939291906143b8565b60405180910390a150505050505050506118f5613149565b505050565b83835f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060e00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015611a3e57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116119f5575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611ac957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a80575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611b1f57602002820191905f5260205f20905b815481526020019060010190808311611b0b575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611b9857602002820191905f5260205f20905f905b82829054906101000a900460ff161515815260200190600101906020825f01049283019260010382029150808411611b635790505b50505050508152505090505f815f015111611bec5782826040517f6831488c000000000000000000000000000000000000000000000000000000008152600401611be3929190613dae565b60405180910390fd5b8686865f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f206040518060e00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015611d3157602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ce8575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611dbc57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d73575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611e1257602002820191905f5260205f20905b815481526020019060010190808311611dfe575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611e8b57602002820191905f5260205f20905f905b82829054906101000a900460ff161515815260200190600101906020825f01049283019260010382029150808411611e565790505b50505050508152505090505f815f015111611edf5783836040517f6831488c000000000000000000000000000000000000000000000000000000008152600401611ed6929190613dae565b60405180910390fd5b6004816040015110611f2a5783836040517f16fd25b3000000000000000000000000000000000000000000000000000000008152600401611f21929190613dae565b60405180910390fd5b60048210611f7557838333846040517f9ae2281a000000000000000000000000000000000000000000000000000000008152600401611f6c9493929190613cd6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603611fef57838333846040517f9ae2281a000000000000000000000000000000000000000000000000000000008152600401611fe69493929190613cd6565b60405180910390fd5b8060c00151828151811061200657612005613ca9565b5b60200260200101511561205657838333846040517f9ae2281a00000000000000000000000000000000000000000000000000000000815260040161204d9493929190613cd6565b60405180910390fd5b5f5b81606001515181101561210c573373ffffffffffffffffffffffffffffffffffffffff168260600151828151811061209357612092613ca9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036120f957848433856040517f9ae2281a0000000000000000000000000000000000000000000000000000000081526004016120f09493929190613cd6565b60405180910390fd5b8080612104906143fb565b915050612058565b50805f015134101561215c578383825f01516040517f7c93456500000000000000000000000000000000000000000000000000000000815260040161215393929190614442565b60405180910390fd5b612164612cd6565b5f60035f8d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8c81526020019081526020015f20905033816003018b815481106121ca576121c9613ca9565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034816005018b8154811061222657612225613ca9565b5b905f5260205f2001819055506001816002015f8282546122469190614477565b925050819055506001816006018b8154811061226557612264613ca9565b5b905f5260205f2090602091828204019190066101000a81548160ff02191690831515021790555088816004018b815481106122a3576122a2613ca9565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa454739fb9d0bd43f6763a1c26349732d466aae8ba0c17705f16ec35ec0ebc158c8c338d60405161231d9493929190613cd6565b60405180910390a15061232e613149565b5050505050505050505050565b612343613346565b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f2090506040518060e00160405280825f01548152602001826001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826002015481526020018260030180548060200260200160405190810160405280929190818152602001828054801561247057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612427575b50505050508152602001826004018054806020026020016040519081016040528092919081815260200182805480156124fb57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116124b2575b505050505081526020018260050180548060200260200160405190810160405280929190818152602001828054801561255157602002820191905f5260205f20905b81548152602001906001019080831161253d575b50505050508152602001826006018054806020026020016040519081016040528092919081815260200182805480156125ca57602002820191905f5260205f20905f905b82829054906101000a900460ff161515815260200190600101906020825f010492830192600103820291508084116125955790505b505050505081525091505092915050565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612683575f80fd5b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461271e575f80fd5b81815f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060e00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561286257602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612819575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156128ed57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116128a4575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561294357602002820191905f5260205f20905b81548152602001906001019080831161292f575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156129bc57602002820191905f5260205f20905f905b82829054906101000a900460ff161515815260200190600101906020825f010492830192600103820291508084116129875790505b50505050508152505090505f815f015111612a105782826040517f6831488c000000000000000000000000000000000000000000000000000000008152600401612a07929190613dae565b60405180910390fd5b5f81604001511115612a5b5782826040517f9b7ce2e7000000000000000000000000000000000000000000000000000000008152600401612a52929190613dae565b60405180910390fd5b5f8590505f60035f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8781526020019081526020015f2090508173ffffffffffffffffffffffffffffffffffffffff166342842e0e30836001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b8152600401612b0e93929190613e14565b5f604051808303815f87803b158015612b25575f80fd5b505af1158015612b37573d5f803e3d5ffd5b5050505060035f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8781526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f612bca9190613396565b600482015f612bd99190613396565b600582015f612be891906133b4565b600682015f612bf791906133d2565b50507ff86e54241e209ee4b38db8e64af9614b083d18f23c32f3293c8a87c6b8bf89438787604051612c2a929190613dae565b60405180910390a150505050505050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c93575f80fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025f5403612d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1190614504565b60405180910390fd5b60025f81905550565b5f806103e890505f8184600581518110612d4057612d3f613ca9565b5b602002602001015187612d539190614522565b612d5d9190614563565b90508083612d6b9190614477565b9250612d778989613152565b73ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015612db9573d5f803e3d5ffd5b505f8285600481518110612dd057612dcf613ca9565b5b602002602001015188612de39190614522565b612ded9190614563565b90508084612dfb9190614477565b935060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015612e61573d5f803e3d5ffd5b505f85600681518110612e7757612e76613ca9565b5b602002602001015190505f805f5b60048110156130e157898114612f625786898281518110612ea957612ea8613ca9565b5b60200260200101518c612ebc9190614522565b612ec69190614563565b92508288612ed49190614477565b97508b606001518181518110612eed57612eec613ca9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc8d60a001518381518110612f2557612f24613ca9565b5b602002602001015185612f389190614477565b90811502906040515f60405180830381858888f19350505050158015612f60573d5f803e3d5ffd5b505b5f73ffffffffffffffffffffffffffffffffffffffff168c608001518281518110612f9057612f8f613ca9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146130415786848c612fc09190614522565b612fca9190614563565b92508288612fd89190614477565b97508b608001518181518110612ff157612ff0613ca9565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc8490811502906040515f60405180830381858888f1935050505015801561303b573d5f803e3d5ffd5b506130ce565b86848c61304e9190614522565b6130589190614563565b925082886130669190614477565b975060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8490811502906040515f60405180830381858888f193505050501580156130cc573d5f803e3d5ffd5b505b80806130d9906143fb565b915050612e85565b505f878b6130ef9190613d46565b90508b6020015173ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015613138573d5f803e3d5ffd5b505050505050505050505050505050565b60015f81905550565b5f8273ffffffffffffffffffffffffffffffffffffffff1663589a1743836040518263ffffffff1660e01b815260040161318c919061342a565b602060405180830381865afa1580156131a7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906131cb9190613de9565b905092915050565b828054828255905f5260205f20908101928215613249579160200282015b82811115613248578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906131f1565b5b50905061325691906133f7565b5090565b828054828255905f5260205f20908101928215613294579160200282015b82811115613293578251825591602001919060010190613278565b5b5090506132a191906133f7565b5090565b828054828255905f5260205f2090601f01602090048101928215613335579160200282015f5b8382111561330757835183826101000a81548160ff02191690831515021790555092602001926001016020815f010492830192600103026132cb565b80156133335782816101000a81549060ff02191690556001016020815f01049283019260010302613307565b505b50905061334291906133f7565b5090565b6040518060e001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f8152602001606081526020016060815260200160608152602001606081525090565b5080545f8255905f5260205f20908101906133b191906133f7565b50565b5080545f8255905f5260205f20908101906133cf91906133f7565b50565b5080545f8255601f0160209004905f5260205f20908101906133f491906133f7565b50565b5b8082111561340e575f815f9055506001016133f8565b5090565b5f819050919050565b61342481613412565b82525050565b5f60208201905061343d5f83018461341b565b92915050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61347d82613454565b9050919050565b61348d81613473565b8114613497575f80fd5b50565b5f813590506134a881613484565b92915050565b6134b781613412565b81146134c1575f80fd5b50565b5f813590506134d2816134ae565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126134f9576134f86134d8565b5b8235905067ffffffffffffffff811115613516576135156134dc565b5b602083019150836001820283011115613532576135316134e0565b5b9250929050565b5f805f805f608086880312156135525761355161344c565b5b5f61355f8882890161349a565b95505060206135708882890161349a565b9450506040613581888289016134c4565b935050606086013567ffffffffffffffff8111156135a2576135a1613450565b5b6135ae888289016134e4565b92509250509295509295909350565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6135f1816135bd565b82525050565b5f60208201905061360a5f8301846135e8565b92915050565b5f602082840312156136255761362461344c565b5b5f6136328482850161349a565b91505092915050565b5f805f606084860312156136525761365161344c565b5b5f61365f8682870161349a565b9350506020613670868287016134c4565b9250506040613681868287016134c4565b9150509250925092565b5f805f80608085870312156136a3576136a261344c565b5b5f6136b08782880161349a565b94505060206136c1878288016134c4565b93505060406136d28782880161349a565b92505060606136e3878288016134c4565b91505092959194509250565b5f80604083850312156137055761370461344c565b5b5f613712858286016134c4565b92505060206137238582860161349a565b9150509250929050565b61373681613412565b82525050565b61374581613473565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61377f838361373c565b60208301905092915050565b5f602082019050919050565b5f6137a18261374b565b6137ab8185613755565b93506137b683613765565b805f5b838110156137e65781516137cd8882613774565b97506137d88361378b565b9250506001810190506137b9565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f613827838361372d565b60208301905092915050565b5f602082019050919050565b5f613849826137f3565b61385381856137fd565b935061385e8361380d565b805f5b8381101561388e578151613875888261381c565b975061388083613833565b925050600181019050613861565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f8115159050919050565b6138d8816138c4565b82525050565b5f6138e983836138cf565b60208301905092915050565b5f602082019050919050565b5f61390b8261389b565b61391581856138a5565b9350613920836138b5565b805f5b8381101561395057815161393788826138de565b9750613942836138f5565b925050600181019050613923565b5085935050505092915050565b5f60e083015f8301516139725f86018261372d565b506020830151613985602086018261373c565b506040830151613998604086018261372d565b50606083015184820360608601526139b08282613797565b915050608083015184820360808601526139ca8282613797565b91505060a083015184820360a08601526139e4828261383f565b91505060c083015184820360c08601526139fe8282613901565b9150508091505092915050565b5f6020820190508181035f830152613a23818461395d565b905092915050565b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b613a7182613a2b565b810181811067ffffffffffffffff82111715613a9057613a8f613a3b565b5b80604052505050565b5f613aa2613443565b9050613aae8282613a68565b919050565b5f67ffffffffffffffff821115613acd57613acc613a3b565b5b602082029050602081019050919050565b5f613af0613aeb84613ab3565b613a99565b90508083825260208201905060208402830185811115613b1357613b126134e0565b5b835b81811015613b3c5780613b2888826134c4565b845260208401935050602081019050613b15565b5050509392505050565b5f82601f830112613b5a57613b596134d8565b5b8135613b6a848260208601613ade565b91505092915050565b5f805f60608486031215613b8a57613b8961344c565b5b5f613b978682870161349a565b9350506020613ba8868287016134c4565b925050604084013567ffffffffffffffff811115613bc957613bc8613450565b5b613bd586828701613b46565b9150509250925092565b5f805f8060808587031215613bf757613bf661344c565b5b5f613c048782880161349a565b9450506020613c15878288016134c4565b9350506040613c26878288016134c4565b9250506060613c378782880161349a565b91505092959194509250565b5f8060408385031215613c5957613c5861344c565b5b5f613c668582860161349a565b9250506020613c77858286016134c4565b9150509250929050565b613c8a81613473565b82525050565b5f602082019050613ca35f830184613c81565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f608082019050613ce95f830187613c81565b613cf6602083018661341b565b613d036040830185613c81565b613d10606083018461341b565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613d5082613412565b9150613d5b83613412565b9250828203905081811115613d7357613d72613d19565b5b92915050565b5f606082019050613d8c5f83018661341b565b613d99602083018561341b565b613da66040830184613c81565b949350505050565b5f604082019050613dc15f830185613c81565b613dce602083018461341b565b9392505050565b5f81519050613de381613484565b92915050565b5f60208284031215613dfe57613dfd61344c565b5b5f613e0b84828501613dd5565b91505092915050565b5f606082019050613e275f830186613c81565b613e346020830185613c81565b613e41604083018461341b565b949350505050565b5f604082019050613e5c5f83018561341b565b613e696020830184613c81565b9392505050565b5f80fd5b5f80fd5b5f81519050613e86816134ae565b92915050565b5f67ffffffffffffffff821115613ea657613ea5613a3b565b5b602082029050602081019050919050565b5f613ec9613ec484613e8c565b613a99565b90508083825260208201905060208402830185811115613eec57613eeb6134e0565b5b835b81811015613f155780613f018882613dd5565b845260208401935050602081019050613eee565b5050509392505050565b5f82601f830112613f3357613f326134d8565b5b8151613f43848260208601613eb7565b91505092915050565b5f613f5e613f5984613ab3565b613a99565b90508083825260208201905060208402830185811115613f8157613f806134e0565b5b835b81811015613faa5780613f968882613e78565b845260208401935050602081019050613f83565b5050509392505050565b5f82601f830112613fc857613fc76134d8565b5b8151613fd8848260208601613f4c565b91505092915050565b5f67ffffffffffffffff821115613ffb57613ffa613a3b565b5b602082029050602081019050919050565b614015816138c4565b811461401f575f80fd5b50565b5f815190506140308161400c565b92915050565b5f61404861404384613fe1565b613a99565b9050808382526020820190506020840283018581111561406b5761406a6134e0565b5b835b8181101561409457806140808882614022565b84526020840193505060208101905061406d565b5050509392505050565b5f82601f8301126140b2576140b16134d8565b5b81516140c2848260208601614036565b91505092915050565b5f60e082840312156140e0576140df613e70565b5b6140ea60e0613a99565b90505f6140f984828501613e78565b5f83015250602061410c84828501613dd5565b602083015250604061412084828501613e78565b604083015250606082015167ffffffffffffffff81111561414457614143613e74565b5b61415084828501613f1f565b606083015250608082015167ffffffffffffffff81111561417457614173613e74565b5b61418084828501613f1f565b60808301525060a082015167ffffffffffffffff8111156141a4576141a3613e74565b5b6141b084828501613fb4565b60a08301525060c082015167ffffffffffffffff8111156141d4576141d3613e74565b5b6141e08482850161409e565b60c08301525092915050565b5f602082840312156142015761420061344c565b5b5f82015167ffffffffffffffff81111561421e5761421d613450565b5b61422a848285016140cb565b91505092915050565b5f6080820190506142465f830187613c81565b6142536020830186613c81565b614260604083018561341b565b61426d606083018461341b565b95945050505050565b5f819050919050565b5f819050919050565b61429961429482614276565b61427f565b82525050565b5f8160601b9050919050565b5f6142b58261429f565b9050919050565b5f6142c6826142ab565b9050919050565b6142de6142d982613473565b6142bc565b82525050565b5f819050919050565b6142fe6142f982613412565b6142e4565b82525050565b5f61430f8286614288565b60208201915061431f82856142cd565b60148201915061432f82846142ed565b602082019150819050949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61437782613412565b915061438283613412565b92508261439257614391614340565b5b828206905092915050565b5f60ff82169050919050565b6143b28161439d565b82525050565b5f6080820190506143cb5f830187613c81565b6143d8602083018661341b565b6143e56040830185613c81565b6143f260608301846143a9565b95945050505050565b5f61440582613412565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361443757614436613d19565b5b600182019050919050565b5f6060820190506144555f830186613c81565b614462602083018561341b565b61446f604083018461341b565b949350505050565b5f61448182613412565b915061448c83613412565b92508282019050808211156144a4576144a3613d19565b5b92915050565b5f82825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f6144ee601f836144aa565b91506144f9826144ba565b602082019050919050565b5f6020820190508181035f83015261451b816144e2565b9050919050565b5f61452c82613412565b915061453783613412565b925082820261454581613412565b9150828204841483151761455c5761455b613d19565b5b5092915050565b5f61456d82613412565b915061457883613412565b92508261458857614587614340565b5b82820490509291505056fea2646970667358221220036b7ad54373e13b9010ddfd577172d06cd7dc1dd2efd195a38e6bb6cf9ee46964736f6c63430008140033";

    public static final String FUNC_CANCELLISTING = "cancelListing";

    public static final String FUNC_CANCELPICK = "cancelPick";

    public static final String FUNC_CHANGEOWNER = "changeOwner";

    public static final String FUNC_DEALLIST = "dealList";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETINITLISTING = "getInitListing";

    public static final String FUNC_GETLISTING = "getListing";

    public static final String FUNC_GETOFFICIALADDRESS = "getOfficialAddress";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_LISTITEM = "listItem";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_PICKITEM = "pickItem";

    public static final String FUNC_SETOFFICIALADDRESS = "setOfficialAddress";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWOTHER = "withdrawOther";

    public static final Event ITEMCANCELED_EVENT = new Event("ItemCanceled",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMDEAL_EVENT = new Event("ItemDeal",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event ITEMLISTED_EVENT = new Event("ItemListed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMPICKED_EVENT = new Event("ItemPicked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CANCELPICKITEM_EVENT = new Event("cancelPickItem",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected Market2(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Market2(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Market2(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Market2(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ItemCanceledEventResponse> getItemCanceledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMCANCELED_EVENT, transactionReceipt);
        ArrayList<ItemCanceledEventResponse> responses = new ArrayList<ItemCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemCanceledEventResponse typedResponse = new ItemCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemCanceledEventResponse getItemCanceledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMCANCELED_EVENT, log);
        ItemCanceledEventResponse typedResponse = new ItemCanceledEventResponse();
        typedResponse.log = log;
        typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ItemCanceledEventResponse> itemCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemCanceledEventFromLog(log));
    }

    public Flowable<ItemCanceledEventResponse> itemCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMCANCELED_EVENT));
        return itemCanceledEventFlowable(filter);
    }

    public static List<ItemDealEventResponse> getItemDealEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMDEAL_EVENT, transactionReceipt);
        ArrayList<ItemDealEventResponse> responses = new ArrayList<ItemDealEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemDealEventResponse typedResponse = new ItemDealEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer_index = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemDealEventResponse getItemDealEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMDEAL_EVENT, log);
        ItemDealEventResponse typedResponse = new ItemDealEventResponse();
        typedResponse.log = log;
        typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.buyer_index = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ItemDealEventResponse> itemDealEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemDealEventFromLog(log));
    }

    public Flowable<ItemDealEventResponse> itemDealEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMDEAL_EVENT));
        return itemDealEventFlowable(filter);
    }

    public static List<ItemListedEventResponse> getItemListedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMLISTED_EVENT, transactionReceipt);
        ArrayList<ItemListedEventResponse> responses = new ArrayList<ItemListedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemListedEventResponse typedResponse = new ItemListedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemListedEventResponse getItemListedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMLISTED_EVENT, log);
        ItemListedEventResponse typedResponse = new ItemListedEventResponse();
        typedResponse.log = log;
        typedResponse.nftOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ItemListedEventResponse> itemListedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemListedEventFromLog(log));
    }

    public Flowable<ItemListedEventResponse> itemListedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMLISTED_EVENT));
        return itemListedEventFlowable(filter);
    }

    public static List<ItemPickedEventResponse> getItemPickedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMPICKED_EVENT, transactionReceipt);
        ArrayList<ItemPickedEventResponse> responses = new ArrayList<ItemPickedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemPickedEventResponse typedResponse = new ItemPickedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.picker = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.pickNum = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemPickedEventResponse getItemPickedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMPICKED_EVENT, log);
        ItemPickedEventResponse typedResponse = new ItemPickedEventResponse();
        typedResponse.log = log;
        typedResponse.nftAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.picker = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.pickNum = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ItemPickedEventResponse> itemPickedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemPickedEventFromLog(log));
    }

    public Flowable<ItemPickedEventResponse> itemPickedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMPICKED_EVENT));
        return itemPickedEventFlowable(filter);
    }

    public static List<CancelPickItemEventResponse> getCancelPickItemEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CANCELPICKITEM_EVENT, transactionReceipt);
        ArrayList<CancelPickItemEventResponse> responses = new ArrayList<CancelPickItemEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CancelPickItemEventResponse typedResponse = new CancelPickItemEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CancelPickItemEventResponse getCancelPickItemEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CANCELPICKITEM_EVENT, log);
        CancelPickItemEventResponse typedResponse = new CancelPickItemEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<CancelPickItemEventResponse> cancelPickItemEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCancelPickItemEventFromLog(log));
    }

    public Flowable<CancelPickItemEventResponse> cancelPickItemEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANCELPICKITEM_EVENT));
        return cancelPickItemEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelListing(String nftAddress, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_CANCELLISTING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelPick(String nftAddress, BigInteger tokenId, BigInteger index) {
        final Function function = new Function(
                FUNC_CANCELPICK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeOwner(String newOwner) {
        final Function function = new Function(
                FUNC_CHANGEOWNER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> dealList(String nftAddress, BigInteger tokenId, List<BigInteger> amountSettings) {
        final Function function = new Function(
                FUNC_DEALLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amountSettings, org.web3j.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getBalance() {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Listing> getInitListing(BigInteger price, String nftRealOwner) {
        final Function function = new Function(FUNC_GETINITLISTING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(price),
                new org.web3j.abi.datatypes.Address(160, nftRealOwner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Listing>() {}));
        return executeRemoteCallSingleValueReturn(function, Listing.class);
    }

    public RemoteFunctionCall<Listing> getListing(String nftAddress, BigInteger tokenId) {
        final Function function = new Function(FUNC_GETLISTING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Listing>() {}));
        return executeRemoteCallSingleValueReturn(function, Listing.class);
    }

    public RemoteFunctionCall<String> getOfficialAddress() {
        final Function function = new Function(FUNC_GETOFFICIALADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> listItem(String nftAddress, BigInteger tokenId, String nftOwner, BigInteger price) {
        final Function function = new Function(
                FUNC_LISTITEM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.Address(160, nftOwner),
                new org.web3j.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(String operator, String from, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_ONERC721RECEIVED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator),
                new org.web3j.abi.datatypes.Address(160, from),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pickItem(String nftAddress, BigInteger tokenId, BigInteger index, String inviter, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PICKITEM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftAddress),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.generated.Uint256(index),
                new org.web3j.abi.datatypes.Address(160, inviter)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> setOfficialAddress(String newAddress) {
        final Function function = new Function(
                FUNC_SETOFFICIALADDRESS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw() {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawOther(String add) {
        final Function function = new Function(
                FUNC_WITHDRAWOTHER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, add)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Market2 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market2(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Market2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market2(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Market2 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Market2(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Market2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Market2(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Market2> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market2.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Market2> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market2.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market2> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market2.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market2> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market2.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Listing extends DynamicStruct {
        public BigInteger price;

        public String seller;

        public BigInteger pickCount;

        public List<String> pickers;

        public List<String> inviters;

        public List<BigInteger> pickVals;

        public List<Boolean> status;

        public Listing(BigInteger price, String seller, BigInteger pickCount, List<String> pickers, List<String> inviters, List<BigInteger> pickVals, List<Boolean> status) {
            super(new org.web3j.abi.datatypes.generated.Uint256(price),
                    new org.web3j.abi.datatypes.Address(160, seller),
                    new org.web3j.abi.datatypes.generated.Uint256(pickCount),
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                            org.web3j.abi.datatypes.Address.class,
                            org.web3j.abi.Utils.typeMap(pickers, org.web3j.abi.datatypes.Address.class)),
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                            org.web3j.abi.datatypes.Address.class,
                            org.web3j.abi.Utils.typeMap(inviters, org.web3j.abi.datatypes.Address.class)),
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                            org.web3j.abi.datatypes.generated.Uint256.class,
                            org.web3j.abi.Utils.typeMap(pickVals, org.web3j.abi.datatypes.generated.Uint256.class)),
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Bool>(
                            org.web3j.abi.datatypes.Bool.class,
                            org.web3j.abi.Utils.typeMap(status, org.web3j.abi.datatypes.Bool.class)));
            this.price = price;
            this.seller = seller;
            this.pickCount = pickCount;
            this.pickers = pickers;
            this.inviters = inviters;
            this.pickVals = pickVals;
            this.status = status;
        }

        public Listing(Uint256 price, Address seller, Uint256 pickCount, DynamicArray<Address> pickers, DynamicArray<Address> inviters, DynamicArray<Uint256> pickVals, DynamicArray<Bool> status) {
            super(price, seller, pickCount, pickers, inviters, pickVals, status);
            this.price = price.getValue();
            this.seller = seller.getValue();
            this.pickCount = pickCount.getValue();
            this.pickers = pickers.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.inviters = inviters.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.pickVals = pickVals.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.status = status.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
        }
    }

    public static class ItemCanceledEventResponse extends BaseEventResponse {
        public String nftAddress;

        public BigInteger tokenId;
    }

    public static class ItemDealEventResponse extends BaseEventResponse {
        public String nftAddress;

        public BigInteger tokenId;

        public String buyer;

        public BigInteger buyer_index;
    }

    public static class ItemListedEventResponse extends BaseEventResponse {
        public String nftOwner;

        public String nftAddress;

        public BigInteger tokenId;

        public BigInteger price;
    }

    public static class ItemPickedEventResponse extends BaseEventResponse {
        public String nftAddress;

        public BigInteger tokenId;

        public String picker;

        public BigInteger pickNum;
    }

    public static class CancelPickItemEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public BigInteger index;

        public String buyer;
    }
}
